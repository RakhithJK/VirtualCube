@charset "UTF-8";
/*
 * @(#)virtualcube.css  1.0  2014-01-13
 *
 * Copyright (c) 2013 Werner Randelshofer, Switzerland.
 * You may not use, copy or modify this file, except in compliance with the
 * accompanying license terms.
 */

/* Stylesheet for the VirtualCube JavaScript applet.
   This stylesheet is used to style the following HTML code:

 <div class="virtualcube"">
   <canvas class="cube-canvas" width="220" height="220"/>
   <div class="button-toolbar">
      <div class="reset-button">Reset</div>
      <div class="undo-button">Undo</div>
      <div class="redo-button">Redo</div>
      <div class="scramble-button">Scramble</div>
   </div>
 </div>
 
*/

.virtualcube {
  display: block;
}
.virtualcube .button-toolbar {
}
.virtualcube .button-toolbar button {
}
.virtualcube .button-toolbar button:active {
}
.virtualcube .button-toolbar .reset-button {
}
.virtualcube .button-toolbar .undo-button {
}
.virtualcube .button-toolbar .redo-button {
}
.virtualcube .button-toolbar .scramble-button {
}


/* general layout */
body {
    word-break: break-all;
}
body>h1,
body>p {
    padding: 0.5vw;
}
/* Responsive layout */
/* Create four equal columns that floats next to each other */
body.responsive article {
  padding: 0.5vw;
  float: left;
  width: 23%;
}
body.responsive .virtualcube .cube-canvas {
  width: 22vw;
  height: 22vw;
  border:1px solid #ccc;
}

/* On screens that are 992px wide or less, go from four columns to two columns */
@media screen and (max-width: 800px) {
    body.responsive article {
      width: 48%;
    }
    body.responsive .virtualcube .cube-canvas {
      width: 44vw;
      height: 44vw;
    }
}
/* On screens that are 420px wide or less, make the columns stack on top of each other instead of next to each other */
@media screen and (max-width: 420px) {
    body.responsive article {
      width: 98%;
    }
    body.responsive .virtualcube .cube-canvas {
      width: 88vw;
      height: 88vw;
    }
}

/* system tests */
section.unittest {
    margin-bottom: 1em;
}
section.unittest.fail .actual { 
    background: lightcoral;
}
section.unittest.pass .actual { 
    background: lightgreen;
}
p.input, p.expected, p.actual {
    margin: 0;
}

p.input:before {
    content: "input: ";
}
p.expected:before {
    content: "expected: ";
}
p.actual:before {
    content: "actual: ";
}
